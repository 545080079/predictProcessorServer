// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package AswSvr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlowManagerClient is the client API for FlowManager controller.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowManagerClient interface {
	CreateFlow(ctx context.Context, in *CreateFlowReq, opts ...grpc.CallOption) (*CreateFlowRsp, error)
}

type flowManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowManagerClient(cc grpc.ClientConnInterface) FlowManagerClient {
	return &flowManagerClient{cc}
}

func (c *flowManagerClient) CreateFlow(ctx context.Context, in *CreateFlowReq, opts ...grpc.CallOption) (*CreateFlowRsp, error) {
	out := new(CreateFlowRsp)
	err := c.cc.Invoke(ctx, "/asw.AswSvr.FlowManager/CreateFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowManagerServer is the server API for FlowManager controller.
// All implementations must embed UnimplementedFlowManagerServer
// for forward compatibility
type FlowManagerServer interface {
	CreateFlow(context.Context, *CreateFlowReq) (*CreateFlowRsp, error)
	mustEmbedUnimplementedFlowManagerServer()
}

// UnimplementedFlowManagerServer must be embedded to have forward compatible implementations.
type UnimplementedFlowManagerServer struct {
}

func (UnimplementedFlowManagerServer) CreateFlow(context.Context, *CreateFlowReq) (*CreateFlowRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlow not implemented")
}
func (UnimplementedFlowManagerServer) mustEmbedUnimplementedFlowManagerServer() {}

// UnsafeFlowManagerServer may be embedded to opt out of forward compatibility for this controller.
// Use of this interface is not recommended, as added methods to FlowManagerServer will
// result in compilation errors.
type UnsafeFlowManagerServer interface {
	mustEmbedUnimplementedFlowManagerServer()
}

func RegisterFlowManagerServer(s grpc.ServiceRegistrar, srv FlowManagerServer) {
	s.RegisterService(&FlowManager_ServiceDesc, srv)
}

func _FlowManager_CreateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowManagerServer).CreateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asw.AswSvr.FlowManager/CreateFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowManagerServer).CreateFlow(ctx, req.(*CreateFlowReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FlowManager_ServiceDesc is the grpc.ServiceDesc for FlowManager controller.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "asw.AswSvr.FlowManager",
	HandlerType: (*FlowManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlow",
			Handler:    _FlowManager_CreateFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "asw.proto",
}
